/*
 * TheHive API
 *
 * Comprehensive OpenAPI specification inferred from the TheHive4py client library. This API allows interaction with TheHive platform for managing alerts, cases, observables, tasks, users, and other entities. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OutputTask {
    #[serde(rename = "_id")]
    pub _id: String,
    #[serde(rename = "_type")]
    pub _type: String,
    #[serde(rename = "_createdBy")]
    pub _created_by: String,
    #[serde(rename = "_createdAt")]
    pub _created_at: i64,
    #[serde(rename = "_updatedBy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub _updated_by: Option<Option<String>>,
    #[serde(rename = "_updatedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub _updated_at: Option<Option<i64>>,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "group")]
    pub group: String,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "flag")]
    pub flag: bool,
    #[serde(rename = "startDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<Option<i64>>,
    #[serde(rename = "endDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<Option<i64>>,
    #[serde(rename = "order")]
    pub order: i32,
    #[serde(rename = "assignee", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Option<String>>,
    #[serde(rename = "dueDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<Option<i64>>,
    #[serde(rename = "mandatory")]
    pub mandatory: bool,
    #[serde(rename = "extraData")]
    pub extra_data: std::collections::HashMap<String, serde_json::Value>,
}

impl OutputTask {
    pub fn new(_id: String, _type: String, _created_by: String, _created_at: i64, title: String, group: String, status: String, flag: bool, order: i32, mandatory: bool, extra_data: std::collections::HashMap<String, serde_json::Value>) -> OutputTask {
        OutputTask {
            _id,
            _type,
            _created_by,
            _created_at,
            _updated_by: None,
            _updated_at: None,
            title,
            group,
            description: None,
            status,
            flag,
            start_date: None,
            end_date: None,
            order,
            assignee: None,
            due_date: None,
            mandatory,
            extra_data,
        }
    }
}

