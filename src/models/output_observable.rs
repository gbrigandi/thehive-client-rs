/*
 * TheHive API
 *
 * Comprehensive OpenAPI specification inferred from the TheHive4py client library. This API allows interaction with TheHive platform for managing alerts, cases, observables, tasks, users, and other entities. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OutputObservable {
    #[serde(rename = "_id")]
    pub _id: String,
    #[serde(rename = "_type")]
    pub _type: String,
    #[serde(rename = "_createdBy")]
    pub _created_by: String,
    #[serde(rename = "_createdAt")]
    pub _created_at: i64,
    #[serde(rename = "_updatedBy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub _updated_by: Option<Option<String>>,
    #[serde(rename = "_updatedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub _updated_at: Option<Option<i64>>,
    #[serde(rename = "dataType")]
    pub data_type: String,
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<String>>,
    #[serde(rename = "attachment", skip_serializing_if = "Option::is_none")]
    pub attachment: Option<Box<models::OutputAttachment>>,
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<String>>,
    #[serde(rename = "startDate")]
    pub start_date: i64,
    #[serde(rename = "tlp")]
    pub tlp: i32,
    #[serde(rename = "tlpLabel")]
    pub tlp_label: String,
    #[serde(rename = "pap")]
    pub pap: i32,
    #[serde(rename = "papLabel")]
    pub pap_label: String,
    #[serde(rename = "ioc")]
    pub ioc: bool,
    #[serde(rename = "sighted")]
    pub sighted: bool,
    #[serde(rename = "sightedAt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sighted_at: Option<Option<i64>>,
    #[serde(rename = "reports")]
    pub reports: std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "extraData")]
    pub extra_data: std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "ignoreSimilarity")]
    pub ignore_similarity: bool,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
}

impl OutputObservable {
    pub fn new(_id: String, _type: String, _created_by: String, _created_at: i64, data_type: String, start_date: i64, tlp: i32, tlp_label: String, pap: i32, pap_label: String, ioc: bool, sighted: bool, reports: std::collections::HashMap<String, serde_json::Value>, extra_data: std::collections::HashMap<String, serde_json::Value>, ignore_similarity: bool) -> OutputObservable {
        OutputObservable {
            _id,
            _type,
            _created_by,
            _created_at,
            _updated_by: None,
            _updated_at: None,
            data_type,
            data: None,
            attachment: None,
            message: None,
            start_date,
            tlp,
            tlp_label,
            pap,
            pap_label,
            ioc,
            sighted,
            sighted_at: None,
            reports,
            extra_data,
            ignore_similarity,
            tags: None,
        }
    }
}

