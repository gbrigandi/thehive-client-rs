/*
 * TheHive API
 *
 * Comprehensive OpenAPI specification inferred from the TheHive4py client library. This API allows interaction with TheHive platform for managing alerts, cases, observables, tasks, users, and other entities. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputOrganisation {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "taskRule", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub task_rule: Option<Option<String>>,
    #[serde(rename = "observableRule", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub observable_rule: Option<Option<String>>,
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
}

impl InputOrganisation {
    pub fn new(name: String, description: String) -> InputOrganisation {
        InputOrganisation {
            name,
            description,
            task_rule: None,
            observable_rule: None,
            locked: None,
        }
    }
}

