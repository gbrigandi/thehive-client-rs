/*
 * TheHive API
 *
 * Comprehensive OpenAPI specification inferred from the TheHive4py client library. This API allows interaction with TheHive platform for managing alerts, cases, observables, tasks, users, and other entities. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputBulkUpdateAlert {
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "sourceRef", skip_serializing_if = "Option::is_none")]
    pub source_ref: Option<String>,
    #[serde(rename = "externalLink", skip_serializing_if = "Option::is_none")]
    pub external_link: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<i32>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<i64>,
    #[serde(rename = "lastSyncDate", skip_serializing_if = "Option::is_none")]
    pub last_sync_date: Option<i64>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "tlp", skip_serializing_if = "Option::is_none")]
    pub tlp: Option<i32>,
    #[serde(rename = "pap", skip_serializing_if = "Option::is_none")]
    pub pap: Option<i32>,
    #[serde(rename = "follow", skip_serializing_if = "Option::is_none")]
    pub follow: Option<bool>,
    #[serde(rename = "customFields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Vec<models::InputCustomFieldValue>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<String>,
    #[serde(rename = "addTags", skip_serializing_if = "Option::is_none")]
    pub add_tags: Option<Vec<String>>,
    #[serde(rename = "removeTags", skip_serializing_if = "Option::is_none")]
    pub remove_tags: Option<Vec<String>>,
    #[serde(rename = "ids")]
    pub ids: Vec<String>,
}

impl InputBulkUpdateAlert {
    pub fn new(ids: Vec<String>) -> InputBulkUpdateAlert {
        InputBulkUpdateAlert {
            r#type: None,
            source: None,
            source_ref: None,
            external_link: None,
            title: None,
            description: None,
            severity: None,
            date: None,
            last_sync_date: None,
            tags: None,
            tlp: None,
            pap: None,
            follow: None,
            custom_fields: None,
            status: None,
            summary: None,
            assignee: None,
            add_tags: None,
            remove_tags: None,
            ids,
        }
    }
}

