/*
 * TheHive API
 *
 * Comprehensive OpenAPI specification inferred from the TheHive4py client library. This API allows interaction with TheHive platform for managing alerts, cases, observables, tasks, users, and other entities. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InputAlert {
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "source")]
    pub source: String,
    #[serde(rename = "sourceRef")]
    pub source_ref: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub date: Option<Option<i64>>,
    #[serde(rename = "externalLink", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub external_link: Option<Option<String>>,
    #[serde(rename = "severity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub severity: Option<Option<Severity>>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    #[serde(rename = "flag", skip_serializing_if = "Option::is_none")]
    pub flag: Option<bool>,
    #[serde(rename = "tlp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tlp: Option<Option<Tlp>>,
    #[serde(rename = "pap", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pap: Option<Option<Pap>>,
    #[serde(rename = "customFields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Option<Vec<models::InputCustomFieldValue>>>,
    #[serde(rename = "summary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Option<String>>,
    #[serde(rename = "status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<String>>,
    #[serde(rename = "assignee", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Option<String>>,
    #[serde(rename = "caseTemplate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub case_template: Option<Option<String>>,
    #[serde(rename = "observables", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub observables: Option<Option<Vec<models::InputObservable>>>,
    #[serde(rename = "procedures", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub procedures: Option<Option<Vec<models::InputProcedure>>>,
}

impl InputAlert {
    pub fn new(r#type: String, source: String, source_ref: String, title: String, description: String) -> InputAlert {
        InputAlert {
            r#type,
            source,
            source_ref,
            title,
            description,
            date: None,
            external_link: None,
            severity: None,
            tags: None,
            flag: None,
            tlp: None,
            pap: None,
            custom_fields: None,
            summary: None,
            status: None,
            assignee: None,
            case_template: None,
            observables: None,
            procedures: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Variant1
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tlp {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
    #[serde(rename = "4")]
    Variant4,
}

impl Default for Tlp {
    fn default() -> Tlp {
        Self::Variant0
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Pap {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "3")]
    Variant3,
}

impl Default for Pap {
    fn default() -> Pap {
        Self::Variant0
    }
}

